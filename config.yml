secrets: private/secretfile.yml
templates:
  global:
    # 10 gigas d'espace disque au minimum
    free_space:
      path: '{{secrets.download.defaultPath}}'
      space: 10000
    # Require at least 30 seeds of any torrent
    torrent_alive:
      min_seeds: 10
      reject_for: 2 hours
    verify_ssl_certificates: no
    deluge:
      main_file_only: yes
      path: '{{ secrets.deluge.path }}'
      ratio: 6
      removeatratio: yes
    # Size and seed restrictions require real torrents
    magnets: no
    # Limit the frequency of requests to domains so they don't complain about
    # using a bot
    headers:
      User-Agent: "Mozilla/5.0 (Windows NT 6.1; rv:13.0) Gecko/20100101 Firefox/13.0.1"
    domain_delay:
      torrentz.eu: 10 seconds
      bt-chat.com-tv: 5 seconds
      bt-chat.com: 5 seconds
      ezrss.it: 2 seconds
      showrss.info-tv: 2 seconds
      t411.me: 2 seconds
      thepiratebay.se: 2 seconds
      kickass.to: 2 seconds
      publichd.eu: 2 seconds
      yify-torrents.com: 2 seconds
  
  tv:
    private_torrents: no
    tmdb_lookup: yes
    include:
      - private/series.yml
    deluge:
      content_filename: "{{series_name}} - {{series_id}} - {{quality}}"
      movedone: '{{secrets.deluge.series_movedone}}'
      label: tv-shows
    # Push notification Mobile
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      #device: '{{ secrets.pushbullet.device }}'
      title: "{{series_name}} {{series_id}}"
      body: "{{series_name}} {{series_id}}\n\n{{title}}\n\nSize: {{content_size}}MB" 
    # generate RSS feed to send daily mail
    #make_rss:
    #  file: '{{ secrets.rss.file }}'
    #  days: 1

  movies:
    quality: 720p+ hdtv+
    content_size: { min: 1000, max: 7000 }
    regexp:
      reject:
        # Avoid certain groups.
        - '(?x) [\W_] (?: maxspeed | tnt[\W_]*village | cocain | wdr | msd | nnd | thc | ssdd | crys ) $'
        # I don't have any 3D displays
        - \b3-?D\b
        # Flexget doesn't recognize "line" as an audio quality.
        - '(?x) [\W_] (?: line ) (?:\.|_|\b)'
        # Avoid Series Episodes
        - s\d+e\d+
        - '(?x) [\W_] (?: screener ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: trailer ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: R5 ) (?:\.|_|\b)'                      
        - '(?x) [\W_] (?: TS ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: WEBSCR ) (?:\.|_|\b)'                            
        - '(?x) [\W_] (?: Cam ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: CamRip ) (?:\.|_|\b)'
        # Reject rar/packs/password
        - \.rar|\.r\d\d|password.txt|\.zip
      from: title
    seen_movies: strict # Don't download movies we've already seen
    # Check for already downloaded manually movies
    exists_movie:
      - '{{ secrets.download.defaultPath }}'
      - '{{ secrets.movies.pathVF }}'
      - '{{ secrets.movies.pathVO }}'
    imdb_lookup: yes
    imdb_required: yes
    if:
      - "'french' == (imdb_languages or ['french'])[0]":
          set:
            content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}"
            movedone: '{{ secrets.movies.pathVF }}'
      - "'french' != (imdb_languages or ['french'])[0]":
          set:
            content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}"
            movedone: '{{ secrets.movies.pathVO }}'
          regexp:
            reject:
              # don't download French movies (only VO)
              - '(?x) [\W_] (?: truefrench | fr | french | VFF | VFQ ) (?:\.|_|\b)':
                  not:
                    # Accept VOSTFR/MultiSub
                    - '(?x) [\W_] (?: VOSTFR | MULTISUB ) (?:\.|_|\b)'
            from: title
    # Push notification on Mobile
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      #device: '{{ secrets.pushbullet.device }}'
      title: "{{imdb_name}} {{imdb_year}} ({{imdb_score}})"
      body: "{{imdb_name}} {{imdb_year}} ({{imdb_score}})\n{{ imdb_genres|join(', ') }}\n\n{{quality}} - {{content_size}}MB\n\n{{imdb_url}}"
    # generate RSS feed to send daily mail
    #make_rss:
    #  file: '{{ secrets.rss.file }}'
    #  days: 1

  movies_discover:
    if:
      - 'imdb_year < now.year - 3': reject
      - "'horror' in (imdb_genres or [])": reject
      - "'musical' in (imdb_genres or [])": reject
      - "'documentary' in (imdb_genres or [])": reject
      # Probably a standup comedy.
      - "'comedy' in (imdb_genres or []) and 1 == len(imdb_actors or [])": reject
      - "'french' == (imdb_languages or ['french'])[0]":
          set:
            content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}"
            movedone: '{{ secrets.movies.pathVF }}'
          imdb:
            min_score: 6.5
            min_votes: 150
      - "'french' != (imdb_languages or ['french'])[0]":
          set:
            content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}"
            movedone: '{{ secrets.movies.pathVO }}'
          imdb:
            min_score: 7
            min_votes: 300
      # Restrictions Notes on specific genres
      - "set(['drama', 'romance']).issubset(set(imdb_genres or []))":
          imdb:
            min_score: 7.5
            min_votes: 400
      - "set(['drama', 'war']).issubset(set(imdb_genres or []))":
          imdb:
            min_score: 7.5
            min_votes: 400
      - "set(['animation', 'family']).issubset(set(imdb_genres or []))":
          imdb:
            min_score: 7.5
            min_votes: 400

  movies_watchlist:
    movie_queue: yes
    
  cpasbien_config:
    include:
      - private/input-movies-cpasbien.yml
    urlrewrite:
      CPASBIENRSS:
        regexp: 'http://www.cpasbien.pe/dl-torrent/films/(?P<abc>[0-9a-z-]+)/(?P<name>[0-9a-z-]+).html'
        format: 'http://www.cpasbien.pe/_torrents/\g<name>.torrent'
                
tasks:
  
  # Specific Task to download monthly newspaper
  PressTorrent:
    priority: 15
    include:
      - private/config-t411.yml
      - private/input-press.yml
    disable_plugin: 
      - inputs
      - regexp
      - content_size
      - torrent_alive
    accept_all: yes
    exists:
      - '{{ secrets.press.exists }}'
    set:
      movedone: '{{ secrets.press.path }}'

  # Search torrent on Dropbox specific synchronised directory
  DropboxTorrent:
    priority: 2
    disable_builtins: yes
    disable_plugin:
      - seen_movies
      - inputs
      - regexp
      - content_size
      - torrent_alive
    plugin_priority:
      exec: 0
    find:
      path: '{{ secrets.dropbox.pathTorrent }}'
      regexp: '.*\.torrent$'
      recursive: yes
    no_entries_ok: yes
    exec:
      on_output:
        for_accepted: rm "{{location}}"
    accept_all: yes
    set:
      movedone: '{{ secrets.dropbox.path }}'
    # Push notification on Mobile
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      device: '{{ secrets.pushbullet.device }}'
      title: "Seedbox: {{title}} downloaded\n\n"
      body: ""

  ###################
  # TV Shows
  ###################

  TV-SHOWS:
    priority: 5
    include:
      - private/input-tvshows-rss.yml
    template: tv

  TV-SHOWS_t411:
    priority: 5
    #only_new: yes
    include:
      - private/config-t411.yml
      - private/input-tvshows-t411.yml
    template: tv

  ###################
  # Movies WatchList
  ###################
 
  # Update IMDB watchlist
  queue_from_imdb:
    priority: 8
    template: no_global # None of the global templates make sense here
    imdb_list:
      user_id: '{{ secrets.imdb.user_id }}'
      list: watchlist
    accept_all: yes
    disable_plugin: [download, deluge, remember_rejected]
    queue_movies:
      quality: 720p+ hdtv+

  Movies_watchlist_t411:
    priority: 10
    #only_new: yes
    include: 
      - private/config-t411.yml
      - private/input-movies-t411.yml
    template:
      - movies
      - movies_watchlist

  Movies_watchlist_cpasbien:
    priority: 10
    #only_new: yes
    template:
      - movies
      - movies_watchlist
      - cpasbien_config

  Movies_watchlist:
    priority: 10
    include:
      - private/input-movies-rss.yml
    template:
      - movies
      - movies_watchlist

  ###################
  # Movies Discover
  ###################

  Movies_discover_t411:
    priority: 15
    #only_new: yes
    include:
      - private/config-t411.yml
      - private/input-movies-t411.yml
    template:
      - movies
      - movies_discover

  Movies_discover_cpasbien:
    priority: 15
    #only_new: yes
    template:
      - movies
      - movies_discover
      - cpasbien_config

  Movies_discover:
    priority: 15
    include:
      - private/input-movies-rss.yml
    template:
      - movies
      - movies_discover

  ###################
  # Subtitles
  ###################

  Subtitles:
    template: no_global # None of the global templates make sense here
    priority: 20
    find:
      path: 
        - '{{ secrets.subtitles.path1 }}'
        - '{{ secrets.subtitles.path2 }}'
      recursive: yes
    accept_all: yes
    seen: local
    disable_builtins: [seen, retry_failed]
    disable_plugin: [deluge]
    regexp: 
      reject_excluding:
        - '.*\.(avi|mkv|mp4)$':
            not:
              - '(?x) [\W_] (?: VOSTFR | Multi | Multisub | sample ) (?:\.|_|\b)'
      from: url
    subliminal:
      languages:
        - fra
      exact_match: no

  ###################
  # EMAILS NOTIFICATIONS
  ###################

  emailfeed:
    priority: 25
    template: no_global # None of the global templates make sense here
    rss:
      url: '{{ secrets.rss.file }}'
    disable_builtins: [seen, retry_failed]
    disable_plugin: [deluge]
    metainfo_series: yes # required for tvdb lookup to work, email template to function correctly
    thetvdb_lookup: yes
    imdb_lookup: yes
    tmdb_lookup: yes
    accept_all: yes
    email:
      from: '{{ secrets.email.from }}'
      to: '{{ secrets.email.to }}'
      smtp_host: '{{ secrets.email.smtp_host }}'
      smtp_port: 587
      smtp_username: '{{ secrets.email.smtp_username }}'
      smtp_password: '{{ secrets.email.smtp_password }}'
      smtp_tls: yes
      subject: '{{ secrets.email.subject }}'
      template: '{{ secrets.email.template }}'
      

schedules:
    
  #
  # Local
  #
  - tasks: [DropboxTorrent]
    interval:
      minutes: 5
  
  #
  # Notifications
  #
  - tasks: [emailfeed, PressTorrent]
    interval:
      days: 1

  #
  # IMDB List & Subtitles
  #
  - tasks: [queue_from_imdb, Subtitles]
    interval:
      hours: 3
      
  #
  # Tv Shows
  #
  - tasks: [TV-SHOWS]
    interval:
      hours: 2

  #
  # Movies Watchlist
  #
  - tasks: [Movies_watchlist_t411, Movies_watchlist, Movies_watchlist_cpasbien]
    interval:
      hours: 2

  #
  # Movies Discover
  #
  - tasks: [Movies_discover_t411, Movies_discover, Movies_discover_cpasbien]
    interval:
      hours: 3
