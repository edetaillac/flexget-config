secrets: private/secretfile.yml
templates:
  global:
    # 10 gigas d'espace disque au minimum
    free_space:
      path: '{{secrets.download.defaultPath}}'
      space: 10000
    # Require at least 15 seeds of any torrent
    torrent_alive:
      min_seeds: 15
      reject_for: 2 hours
    verify_ssl_certificates: no
    #deluge:
    #  main_file_only: yes
    #  path: '{{ secrets.deluge.path }}'
    #  ratio: 6
    #  removeatratio: yesi
    transmission:
      host: localhost
      port: 8072
      username: '{{ secrets.transmission.username }}'
      password: '{{ secrets.transmission.password }}'
      include_subs: yes
      main_file_only: yes
      ratio: 6
      path: '{{ secrets.transmission.path }}'   
    # Size and seed restrictions require real torrents
    magnets: no
    # Limit the frequency of requests to domains so they don't complain about
    # using a bot
    headers:
      User-Agent: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"
    domain_delay:
      torrentz.eu: 10 seconds
      bt-chat.com-tv: 5 seconds
      bt-chat.com: 5 seconds
      ezrss.it: 5 seconds
      showrss.info-tv: 5 seconds
      t411.io: 5 seconds
      thepiratebay.se: 5 seconds
      kat.cr: 10 seconds
      publichd.eu: 5 seconds
      yify-torrents.com: 5 seconds
  
  tv:
    private_torrents: no
    tmdb_lookup: yes
    include:
      - private/series.yml
    transmission:
      content_filename: "{{series_name}} - {{series_id}} - {{quality}}"
      path: '{{secrets.transmission.series_movedone}}'
    # Push notification Mobile
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      #device: '{{ secrets.pushbullet.device }}'
      title: "{{series_name}} {{series_id}}"
      body: "{{series_name}} {{series_id}}\n\n{{title}}\n\nSize: {{content_size}}MB" 
    # generate RSS feed to send daily mail
    #make_rss:
    #  file: '{{ secrets.rss.file }}'
    #  days: 1

  imdb_watchlist:
    seen: local
    retry_failed:
      max_retries: 10
    accept_all: yes
    no_entries_ok: yes
    disable:
      - download
      - transmission
      - remember_rejected
      - retry_failed

  movies:
    quality: 720p+
    content_size: { min: 1000, max: 15000 }
    regexp:
      reject:
        # Avoid certain groups.
        - '(?x) [\W_] (?: maxspeed | tnt[\W_]*village | cocain | wdr | msd | nnd | thc | ssdd | crys ) $'
        # I don't have any 3D displays
        - \b3-?D\b
        # Flexget doesn't recognize "line" as an audio quality.
        - '(?x) [\W_] (?: line ) (?:\.|_|\b)'
        # Avoid Series Episodes
        - s\d+e\d+
        - '(?x) [\W_] (?: screener ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: trailer ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: R5 ) (?:\.|_|\b)'                      
        - '(?x) [\W_] (?: TS ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: WEBSCR ) (?:\.|_|\b)'                            
        - '(?x) [\W_] (?: Cam ) (?:\.|_|\b)'
        - '(?x) [\W_] (?: CamRip ) (?:\.|_|\b)'
        # Reject rar/packs/password
        - \.rar|\.r\d\d|password.txt|\.zip
      from: title
    seen_movies: strict # Don't download movies we've already seen

    # Check for already downloaded manually movies
    exists_movie:
      path:
        - '{{ secrets.download.defaultPath }}'
        - '{{ secrets.movies.pathVF }}'
        - '{{ secrets.movies.pathVO }}'
      type: files
      lookup: imdb
  
    imdb_required: yes
    imdb_lookup: yes

    require_field:
      - imdb_id
      - imdb_name
      - imdb_year
      - imdb_url
      - imdb_languages
      - imdb_genres

    # Filter to accept entries
    movie_queue: accept

    if:
      - "'french' == (imdb_languages or ['french'])[0]":
          set:
            content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}"
            path: '{{ secrets.movies.pathVF }}'
      - "'french' != (imdb_languages or ['french'])[0]":
          set:
            content_filename: "{{ imdb_name|replace('/', '_')|replace(':', ' -') }} ({{ imdb_year }}) - {{ quality }}"
            path: '{{ secrets.movies.pathVO }}'
    # Don't download movies already rated    
    crossmatch:
      from:
        - imdb_list:
            list: ratings
            user_id: '{{ secrets.imdb.user_id }}'
      fields:
        - imdb_id
      action: reject
    # Push notification on Mobile
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      #device: '{{ secrets.pushbullet.device }}'
      title: "{{imdb_name}} {{imdb_year}} ({{imdb_score}})"
      body: "Genres: {{ imdb_genres|join(', ') }}\n\nTitle: {{title}}\nQuality: {{quality}}\nSize: {{content_size}}MB\n\nDownloaded by: {{task}}"
      url: "{% if imdb_url %}{{ imdb_url }}{% endif %}"
    # generate RSS feed to send daily mail
    #make_rss:
    #  file: '{{ secrets.rss.file }}'
    #  days: 1

  movies_watchlist:
    if:
      - "'french' != (imdb_languages or ['french'])[0]":
          regexp:
            reject_excluding:
              # Only accept VOSTFR or Multi sub
              - '(?x) [\W_] (?: VOSTFR | MULTISUB | MULTI ) (?:\.|_|\b)'
            from: title

  movies_discover:
     # Don't download movies in watchlist
    crossmatch:
      from:
        - imdb_list:
            list: watchlist
            user_id: '{{ secrets.imdb.user_id }}'
      fields:
        - imdb_id
      action: reject
    if:
      - 'imdb_year < now.year - 3': reject
      - "'horror' in (imdb_genres or [])": reject
      - "'musical' in (imdb_genres or [])": reject
      - "'documentary' in (imdb_genres or [])": reject
      # Probably a standup comedy.
      - "'comedy' in (imdb_genres or []) and 1 == len(imdb_actors or [])": reject
      - "'french' == (imdb_languages or ['french'])[0]":
          imdb:
            min_score: 6.5
            min_votes: 150
      - "'french' != (imdb_languages or ['french'])[0]":
          regexp:
            reject_excluding:
              # Accept VOSTFR/MultiSub
              - '(?x) [\W_] (?: VOSTF | VOSTFR | MULTISUB | MULTI ) (?:\.|_|\b)'
            from: title
          imdb:
            min_score: 7.4
            min_votes: 300
      # Restrictions Notes on specific genres
      - "'drama' in (imdb_genres or [])":
          imdb:
            min_score: 7.6
            min_votes: 400
      - "'war' in (imdb_genres or [])":
          imdb:
            min_score: 7.6
            min_votes: 400
      - "'romance' in (imdb_genres or [])":
          imdb:
            min_score: 7.6
            min_votes: 400
      - "set(['animation', 'family']).issubset(set(imdb_genres or []))":
          imdb:
            min_score: 7.7
            min_votes: 400
    
  cpasbien_config:
    include:
      - private/input-movies-cpasbien.yml
    urlrewrite:
      CPASBIENRSS:
        regexp: 'http://www.cpasbien.pe/dl-torrent/films/(?P<abc>[0-9a-z-]+)/(?P<name>[0-9a-z-]+).html'
        format: 'http://www.cpasbien.pe/_torrents/\g<name>.torrent'
                
tasks:
  
  # Specific Task to download monthly newspaper
  PressTorrent:
    priority: 15
    include:
      - private/config-t411.yml
      - private/input-press.yml
    disable: 
      - inputs
      - regexp
      - content_size
      - torrent_alive
    accept_all: yes
    exists:
      - '{{ secrets.press.exists }}'
    set:
      path: '{{ secrets.press.path }}'

  # Search torrent on Dropbox specific synchronised directory
  DropboxTorrent:
    priority: 2
    disable: yes
    disable:
      - seen_movies
      - inputs
      - regexp
      - content_size
      - torrent_alive
    plugin_priority:
      exec: 0
    filesystem:
      path: '{{ secrets.dropbox.pathTorrent }}'
      mask: '*.torrent'
      recursive: yes
      retrieve: files
    no_entries_ok: yes
    exec:
      on_output:
        for_accepted: rm "{{location}}"
    accept_all: yes
    set:
      path: '{{ secrets.dropbox.path }}'
    # Push notification on Mobile
    pushbullet:
      apikey: '{{ secrets.pushbullet.apikey }}'
      #device: '{{ secrets.pushbullet.device }}'
      title: "Seedbox: {{title}} downloaded\n\n"
      body: ""

  ###################
  # TV Shows
  ###################

  TV-SHOWS_rss:
    priority: 5
    include:
      - private/input-tvshows-rss.yml
    template: tv

  TV-SHOWS_discover:
    priority: 5
    discover:
      what:
        - emit_series: yes
      from:
        - torrent411: 
            username: '{{ secrets.t411.username }}'
            password: '{{ secrets.t411.password }}'
            category: Serie-TV
            sub_category:
              - HDrip-720p
        - kat:
            category: tv
            verified: yes
    template: tv

  ###################
  # Movies WatchList
  ###################
 
  # Update IMDB watchlist
  queue_from_imdb:
    priority: 8
    # Don't add movies in ratings list
    crossmatch:
      from:
        - imdb_list:
            list: ratings
            user_id: '{{ secrets.imdb.user_id }}'
      fields:
        - imdb_id
      action: reject
    imdb_list:
      user_id: '{{ secrets.imdb.user_id }}'
      list: watchlist
    movie_queue:
      action: add
      quality: 720p+
    template: 
      - no_global # None of the global templates make sense here
      - imdb_watchlist
    disable:
      - seen

  # Delete already rated movies from IMDB watchlist
  delete_from_imdb:
    priority: 8
    imdb_list:
      user_id: '{{ secrets.imdb.user_id }}'
      list: ratings
    movie_queue: remove
    template: 
      - no_global # None of the global templates make sense here
      - imdb_watchlist

  Movies_watchlist_t411:
    priority: 10
    include: 
      - private/config-t411.yml
      - private/input-movies-t411.yml
    template:
      - movies
      - movies_watchlist

  Movies_watchlist_discover:
    priority: 10
    verify_ssl_certificates:  no
    discover:
      what:
        - emit_movie_queue: { year: no } 
      from:
        - cpasbien:
            category: "films"
        - torrent411: 
            username: '{{ secrets.t411.username }}'
            password: '{{ secrets.t411.password }}'
            category: Film
            sub_category:
              - HDrip-720p
              - HDrip-1080p
        - kat:
            category: movies
            verified: yes
        #- search_rss: http://kickass.unblocked.la/usearch/{{search_term}}%20category:movies%20verified:1/?rss=1
        - torrentz: verified
      ignore_estimations: yes
    template:
      - movies
      - movies_watchlist

  Movies_watchlist:
    priority: 10
    include:
      - private/input-movies-rss.yml
    template:
      - movies
      - movies_watchlist

  Movies_watchlist_lbta:
    priority: 10
    # lbta is not concerned by min_seeds constraint
    torrent_alive:
      min_seeds: 1
    include:
      - private/input-movies-lbta.yml
    template:
      - movies
      - movies_watchlist

  ###################
  # Movies Discover
  ###################

  Movies_discover_t411:
    priority: 15
    #only_new: yes
    include:
      - private/config-t411.yml
      - private/input-movies-t411.yml
    template:
      - movies
      - movies_discover

  Movies_discover_cpasbien:
    priority: 15
    #only_new: yes
    template:
      - movies
      - movies_discover
      - cpasbien_config

  Movies_discover:
    priority: 15
    include:
      - private/input-movies-rss.yml
    template:
      - movies
      - movies_discover

  Movies_discover_lbta:
    priority: 15
    include:
      - private/input-movies-lbta.yml
    template:
      - movies
      - movies_discover

  ###################
  # Subtitles
  ###################

  Subtitles:
    template: no_global # None of the global templates make sense here
    priority: 20
    filesystem:
      path: 
        - '{{ secrets.subtitles.path1 }}'
        #- '{{ secrets.subtitles.path2 }}'
      recursive: yes
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4)$'
    accept_all: yes
    seen: local
    disable:
      - transmission
      - retry_failed
    regexp: 
      reject:
        - '(?x) [\W_] (?: french | VOSTFR | Multi | Multisub | sample ) (?:\.|_|\b)'
      from: url
    subliminal:
      languages:
        - fra
      exact_match: yes

  ###################
  # EMAILS NOTIFICATIONS
  ###################

  emailfeed:
    priority: 25
    template: no_global # None of the global templates make sense here
    rss:
      url: '{{ secrets.rss.file }}'
    disable:
      - transmission
      - seen        
      - retry_failed
    metainfo_series: yes # required for tvdb lookup to work, email template to function correctly
    thetvdb_lookup: yes
    imdb_lookup: yes
    tmdb_lookup: yes
    accept_all: yes
    email:
      from: '{{ secrets.email.from }}'
      to: '{{ secrets.email.to }}'
      smtp_host: '{{ secrets.email.smtp_host }}'
      smtp_port: 587
      smtp_username: '{{ secrets.email.smtp_username }}'
      smtp_password: '{{ secrets.email.smtp_password }}'
      smtp_tls: yes
      subject: '{{ secrets.email.subject }}'
      template: '{{ secrets.email.template }}'
  
  stopSeeding:
    clean_transmission:
      port: 8072
      host: localhost
      username: '{{ secrets.transmission.username }}'
      password: '{{ secrets.transmission.password }}'
      min_ratio: 6
    template: no_global
    disable: [details]
      

schedules:
    
  #
  # Local
  #
  - tasks: [DropboxTorrent]
    interval:
      minutes: 5
  
  #
  # Notifications
  #
  #- tasks: [emailfeed]
  #  interval:
  #   days: 1

  #
  # Subtitles
  #
  - tasks: [Subtitles]
    interval:
      hours: 1

  #
  # IMDB Watchlist update
  #
  - tasks: [queue_from_imdb, stopSeeding]
    interval:
      hours: 4

  #
  # IMDB Watchlist matching ratings List & cleanTransmission
  #
  - tasks: [delete_from_imdb, stopSeeding]
    interval:
      days: 1
      
  #
  # Tv Shows
  #
  - tasks: [TV-SHOWS_rss, TV-SHOWS_discover]
    interval:
      hours: 4

  #
  # Movies Watchlist
  #
  - tasks: [Movies_watchlist_discover]
    interval:
      hours: 4

  #
  # Movies Discover
  #
  - tasks: [Movies_discover_t411, Movies_discover]
    interval:
      hours: 6
